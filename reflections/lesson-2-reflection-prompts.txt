Q1: What happens when you initialize a repository? Why do you need to do it?
A1: it creates a running log of all commits that you will do in the repository directory. This will help us retrieve various versions of the repository in time.

Q2: How is the staging area different from the working directory and the repository? What value do you think it offers?
A2: We can edit files in staging area and work on them before we are sure of commiting them. 

Q3: How can you use the staging area to make sure you have one commit per logical change?
A3: By adding all files that have logically changed (i.e. by running git diff command)in the working directory to the staged area. Once ou have all changes in staged area, one commit will suffice per logical change.

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A4: When you are trying to add a new experimental feature, want to develop various modes of the program

Q5: How do the diagrams help you visualize the branch structure?
A5: they show the heirarchy of code and the order of various commits. It helps in making a logical distinction between different branches and their purpose.

Q6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A6: By combining the two branches togather we are combining their latest content from the last commits without duplicating.

Q7: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A7: saves time by avoiding redundancy and task repetition